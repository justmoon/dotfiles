" Set terminal title
set title

" Show relative line numbers and current absolute line number in normal mode and
" all absolute line numbers in insert mode
set number relativenumber
autocmd InsertEnter * :set norelativenumber
autocmd InsertLeave * :set relativenumber

" Highlight cursor line
set cursorline

" UTF-8 encoding, duh
set encoding=utf-8

" Disable bell (visual and beep)
set belloff=all

" Always keep some lines around the cursor
set scrolloff=7

" Default to soft tabs, two spaces wide
set tabstop=2
set softtabstop=2
set shiftwidth=2
set expandtab

" Don't show redundant mode
set noshowmode

" Automatically reload changed files if unmodified
set autoread

" Split to the right or below
set splitbelow
set splitright

" Check for changes when gaining focus
au FocusGained,BufEnter * :silent! !

" Save file when losing focus
au FocusLost,WinLeave * :silent! w

" Show whitespace
set list lcs=tab:»\ ,extends:›,precedes:‹,nbsp:·,trail:·

" json-vim: Do not hide quotes in JSON files
let g:vim_json_conceal = 0

" vim-markdown: Do not hide useful content
let g:vim_markdown_conceal = 0

" Dracula: Enable dracula theme
syntax on
if filereadable( expand("$HOME/.vim/plugged/dracula") )
  colorscheme dracula
endif
let g:airline_theme='dracula'

" Lightline: Instantly update airline when exiting insert mode
"set ttimeoutlen=50

" Lightline: Config
let g:lightline = {
  \ 'colorscheme': 'dracula',
  \ 'active': {
  \   'left': [
  \     [ 'mode', 'paste' ],
  \     [ 'filename', 'vista', ],
  \     [ 'git' ]
  \   ],
  \   'right': [
  \     [ 'lineinfo' ],
  \     [ 'fileformat', 'fileencoding', 'filetype' ]
  \   ]
  \ },
  \ 'inactive': {
  \   'left': [
  \     [ 'filename' ]
  \   ],
  \   'right': [
  \     [ 'lineinfo' ]
  \   ]
  \ },
  \ 'component': {
  \   'lineinfo': ' %3l:%-2v(%3p%%)%<',
  \ },
  \ 'component_function': {
  \   'filename': 'LightlineFilename',
  \   'git': 'LightlineGit',
  \   'vista': 'LightlineVista'
  \ },
  \ 'separator': { 'left': '', 'right': '' },
  \ 'subseparator': { 'left': '', 'right': '' }
  \ }
function! LightlineModified()
  return &ft =~# 'help\|vimfiler' ? '' : &modified ? '✱' : &modifiable ? '' : '-'
endfunction
function! LightlineReadonly()
  return &ft !~? 'help\|vimfiler' && &readonly ? '' : ''
endfunction
function! LightlineFilename()
  return (LightlineReadonly() !=# '' ? LightlineReadonly() . ' ' : '') .
  \ (&ft ==# 'vimfiler' ? vimfiler#get_status_string() :
  \  &ft ==# 'unite' ? unite#get_status_string() :
  \  &ft ==# 'vimshell' ? vimshell#get_status_string() :
  \ expand('%:t') !=# '' ? expand('%:t') : '[No Name]') .
  \ (LightlineModified() !=# '' ? LightlineModified() : '')
endfunction
function! LightlineGit()
	if exists('*FugitiveHead')
		let branch = FugitiveHead()
    let [a,m,r] = GitGutterGetHunkSummary()
		return branch !=# '' ? printf('+%d ~%d -%d', a, m, r) . '  '.branch : ''
	endif
	return ''
endfunction
function! LightlineVista() abort
  return get(b:, 'vista_nearest_method_or_function', '')
endfunction

" Vista: Run at start to enable vista.vim
autocmd VimEnter * call vista#RunForNearestMethodOrFunction()

" Gitgutter: Nicer remove sign
let g:gitgutter_sign_removed = '–'

" Goyo: Also enable Limelight
function! s:goyo_enter()
  Limelight
  CocDisable
endfunction

function! s:goyo_leave()
  Limelight!
  CocEnable
endfunction

autocmd! User GoyoEnter nested call <SID>goyo_enter()
autocmd! User GoyoLeave nested call <SID>goyo_leave()

" Git Gutter: Always show sign column
set signcolumn=yes

" Move: Use Ctrl+arrow keys to move lines
let g:move_map_keys = 0
vmap <C-Up> <Plug>MoveBlockUp
vmap <C-Down> <Plug>MoveBlockDown
nmap <C-Up> <Plug>MoveLineUp
nmap <C-Down> <Plug>MoveLineDown

" Vista: No icons
let g:vista#renderer#enable_icon = 0

" FZF: Search for stuff under cursor
function! SearchWordWithAg()
  execute 'Ag' expand('<cword>')
endfunction

function! SearchVisualSelectionWithAg() range
  let old_reg = getreg('"')
  let old_regtype = getregtype('"')
  let old_clipboard = &clipboard
  set clipboard&
  normal! ""gvy
  let selection = getreg('"')
  call setreg('"', old_reg, old_regtype)
  let &clipboard = old_clipboard
  execute 'Ag' selection
endfunction

" Leader mappings
let mapleader=","
nnoremap <silent> <leader>f :call ExplorerOpen(":Files")<CR>
nnoremap <silent> <leader>; :BLines<CR>
nnoremap <silent> <leader>/ :execute 'Ag ' . input('Ag/')<CR>
nnoremap <silent> <leader>K :call SearchWordWithAg()<CR>
vnoremap <silent> <leader>K :call SearchVisualSelectionWithAg()<CR>
nnoremap <silent> <leader>gl :Commits<CR>
nnoremap <silent> <leader>ga :BCommits<CR>
nnoremap <silent> <leader>ft :Filetypes<CR>
nnoremap <silent> <leader>y :Goyo<CR>
nnoremap <silent> <leader>v :Vista!!<CR>
nnoremap <silent> <leader>u :MundoToggle<CR>

" Git
nnoremap <silent> <leader>gs :Gedit :<CR>
nnoremap <silent> <leader>gd :Gdiff<CR>
nnoremap <silent> <leader>gc :Gcommit<CR>
nnoremap <silent> <leader>gb :Gblame<CR>
nnoremap <silent> <leader>ge :Gedit<CR>
nnoremap <silent> <leader>gE :Gedit<space>
nnoremap <silent> <leader>gr :Gread<CR>
nnoremap <silent> <leader>gR :Gread<space>
nnoremap <silent> <leader>gw :Gwrite<CR>
nnoremap <silent> <leader>gW :Gwrite!<CR>
nnoremap <silent> <leader>gq :Gwq<CR>
nnoremap <silent> <leader>gQ :Gwq!<CR>

" Copy to clipboard
vnoremap  <leader>y  "+y
nnoremap  <leader>Y  "+yg_
nnoremap  <leader>y  "+y

" Paste from clipboard
nnoremap <leader>p "+p
nnoremap <leader>P "+P
vnoremap <leader>p "+p
vnoremap <leader>P "+P

" Ctrl-based mappings
noremap <silent> <C-S> :update<CR>
vnoremap <silent> <C-S> <ESC>:update<CR>
inoremap <silent> <C-S> <ESC>:update<CR>
nmap <C-p> <leader>f
nmap <C-_> <Plug>NERDCommenterToggle
vmap <C-_> <Plug>NERDCommenterToggle<CR>gv

imap <C-x><C-f> <plug>(fzf-complete-file-ag)
imap <C-x><C-l> <plug>(fzf-complete-line)

imap <S-Insert> <ESC>"+pa

nnoremap <Tab> >>_
nnoremap <S-Tab> <<_
inoremap <S-Tab> <C-D>
vnoremap <Tab> >gv
vnoremap <S-Tab> <gv
